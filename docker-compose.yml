version: "3.8"

services:
  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend

  # Backend (Node.js)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - MONGODB_URI=mongodb://root:example@mongo:27017/stacks?authSource=admin
    depends_on:
      - mongo
    networks:
      - app-network

  # MongoDB (Database)
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Mongo Express (Web interface for MongoDB)
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/stacks?authSource=admin
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: 123456
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - app-network

  # Web (Nginx)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
      - mongo-express
    networks:
      - app-network

# Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  mongodb_data: